#include <boost/asio.hpp>
#include <boost/asio/ssl.hpp>
#include <boost/beast.hpp>
#include <boost/beast/ssl.hpp>

#include <fstream>
#include<deque>
#include <chrono>
#include <iomanip>
#include <iostream>
#include "Include/root_certificates.hpp"
#include "Include/json.h"
#include "Include/config.h"
#include "Include/json.hpp"
#include "rapidjson/include/rapidjson/document.h"
#include "rapidjson/include/rapidjson/writer.h"
#include "rapidjson/include/rapidjson/stringbuffer.h"
#include "Include/version.h"
#include "Include/json_features.h"
#include "Include/writer.h"
#include "Include/reader.h"
#include "rapidjson/include/rapidjson/allocators.h"
// Your code using RapidJSON
#include <sys/types.h>
#include <unistd.h>

using json = nlohmann::json;

namespace beast     = boost::beast;     // from <boost/beast.hpp>
namespace http      = beast::http;      // from <boost/beast/http.hpp>
namespace websocket = beast::websocket; // from <boost/beast/websocket.hpp>
namespace net       = boost::asio;      // from <boost/asio.hpp>
namespace ssl       = net::ssl;
using tcp           = net::ip::tcp; // from <boost/asio/ip/tcp.hpp>

using Stream = websocket::stream<beast::ssl_stream<beast::tcp_stream>>;
using namespace std::chrono_literals;

//------------------------------------------------------------------------------
// struct tagTimestamp
// {
//     double nTimestamp;
//     std::string cSymbol;
//     std::string nClosePrice;
// };

struct tagBinanceSymbolData
{
    std::string symbol;
    std::string price;
    unsigned long int Timestamp;
    // Add more fields as needed
};

// Report a failure
void fail(beast::error_code ec, char const* what)
{
    std::cerr << what << ": " << ec.message() << "\n";
}

// Sends a WebSocket message and prints the response
class session : public std::enable_shared_from_this<session>
{
    tcp::resolver resolver_;
    Stream        ws_;

    beast::flat_buffer buffer_;
    std::string        host_;
    std::string        message_text_;

  public:
    // Resolver and socket require an io_context
    explicit session(net::io_context& ioc, ssl::context& ctx)
        : resolver_(net::make_strand(ioc))
        , ws_(net::make_strand(ioc), ctx)
    {
    }

    // Start the asynchronous operation
    void run(char const* host, char const* port, Json::Value message)
    {
        // Set SNI Hostname (many hosts need this to handshake successfully)
        if (!SSL_set_tlsext_host_name(ws_.next_layer().native_handle(), host)) 
        {
            throw boost::system::system_error(beast::error_code(
                ::ERR_get_error(), net::error::get_ssl_category()));
        }

            // Save these for later
            host_         = host;
            message_text_ = Json_to_string(message);

            // Look up the domain name
            resolver_.async_resolve(
                host,
                port,
                beast::bind_front_handler(
                    &session::on_resolve,
                    shared_from_this()));
    }

void on_resolve(beast::error_code ec,tcp::resolver::results_type results)
{
        if(ec)
            return fail(ec, "resolve");

        // Set SNI Hostname (many hosts need this to ssl handshake successfully)
        if (!SSL_set_tlsext_host_name(ws_.next_layer().native_handle(),host_.c_str())) 
        {
            throw beast::system_error{beast::error_code(
                ::ERR_get_error(), net::error::get_ssl_category())};
        }

        // Set the timeout for the operation
        get_lowest_layer(ws_).expires_after(30s);

        // Make the connection on the IP address we get from a lookup
        beast::get_lowest_layer(ws_).async_connect(
            results,
            beast::bind_front_handler(
                &session::on_connect,
                shared_from_this()));
    }

void on_connect(beast::error_code ec, [[maybe_unused]] tcp::resolver::results_type::endpoint_type ep)
{
        if(ec)
            return fail(ec, "connect");

        // Update the host_ string. This will provide the value of the
        // Host HTTP header during the WebSocket handshake.
        // See https://tools.ietf.org/html/rfc7230#section-5.4
        //host_ += ':' + std::to_string(ep.port());

        // Perform the SSL handshake
        ws_.next_layer().async_handshake(ssl::stream_base::client,beast::bind_front_handler(&session::on_ssl_handshake,
                                      shared_from_this()));
}

void on_ssl_handshake(beast::error_code ec)
{
        if(ec)
            return fail(ec, "ssl_handshake");

        // Turn off the timeout on the tcp_stream, because
        // the websocket stream has its own timeout system.
        beast::get_lowest_layer(ws_).expires_never();

        // Set suggested timeout settings for the websocket
        ws_.set_option(
            websocket::stream_base::timeout::suggested(
                beast::role_type::client));

        // Set a decorator to change the User-Agent of the handshake
        ws_.set_option(websocket::stream_base::decorator(
            [](websocket::request_type& req)
            {
                req.set(http::field::user_agent,
                    std::string(BOOST_BEAST_VERSION_STRING) +
                        " websocket-client-async");
            }));

        // Perform the websocket handshake
        std::cout << "using host_: " << host_ << std::endl;
        ws_.async_handshake(host_, "/ws",
            beast::bind_front_handler(
                &session::on_handshake,
                shared_from_this()));
}

        std::string Json_to_string(const Json::Value& json) 
        {
        Json::StreamWriterBuilder wbuilder;
        wbuilder["indentation"] = ""; // Optional
        return Json::writeString(wbuilder, json);
        }

void on_handshake(beast::error_code ec)
{
        if(ec) 
        {
            return fail(ec, "handshake");
        }
        
        // Send the message
        std::cout << "Sending " << message_text_ << std::endl;
        ws_.async_write(
            net::buffer(message_text_),
            beast::bind_front_handler(&session::on_write, shared_from_this()));
}

void on_write(beast::error_code ec, std::size_t bytes_transferred) 
{
        boost::ignore_unused(bytes_transferred);

        if(ec)
            return fail(ec, "write");
        
        // Read a message into our buffer
        ws_.async_read(
            buffer_,
            beast::bind_front_handler(
                &session::on_read,
                shared_from_this()));
}
void StoreInDeque(tagBinanceSymbolData& stBinanceSymbolData)
{
    // Define a deque of vectors of tagBinanceSymbolData
    std::deque<std::vector<tagBinanceSymbolData>> movingWindow;

    // Create a vector to hold the current window of data
    std::vector<tagBinanceSymbolData> currentWindow;

    // Push the current data into the vector
    currentWindow.push_back(stBinanceSymbolData);

    // Push the vector into the deque
    movingWindow.push_back(currentWindow);

    // Print the elements of the first vector in the deque
    for (const auto& element : movingWindow.front())
     {
        std::cout << "Symbol: " << element.symbol << ", ";
        std::cout << "Price: " << element.price << ", ";
        std::cout << "Timestamp: " << element.Timestamp << std::endl;
    }
    std::cout << std::endl;
}

void on_read(beast::error_code ec, std::size_t bytes_transferred)
{
    boost::ignore_unused(bytes_transferred);

    if (ec)
        return fail(ec, "read");

    // Parse JSON using RapidJSON
    rapidjson::Document data;
    data.Parse(beast::buffers_to_string(buffer_.data()).c_str());

    if (data.HasParseError()) {
        //std::cerr << "Error parsing JSON: " << rapidjson::GetParseError_En(data.GetParseError()) << std::endl;
        return;
    }

    if (data.IsArray())
     {
        for (const auto& binanceJson : data.GetArray()) 
        {
            tagBinanceSymbolData symbolData;

            // Extract data from JSON and store in the structure
            if (binanceJson.HasMember("s") && binanceJson["s"].IsString()) {
                symbolData.symbol = binanceJson["s"].GetString();
            }

            if (binanceJson.HasMember("c") && binanceJson["c"].IsString()) {
                symbolData.price = binanceJson["c"].GetString();
            }
           
            if (binanceJson.HasMember("E") && binanceJson["E"].IsNumber()) {
               symbolData.Timestamp = binanceJson["E"].GetUint64();
            }

            // std::cout << "Symbol: " << symbolData.symbol << std::endl;
            // std::cout << "Price: " << symbolData.price << std::endl;
            // std::cout << "Timestamp: " << symbolData.Timestamp << std::endl;
                   
            StoreInDeque(symbolData);       
        }
    }
     else 
     {
        std::cerr << "Error: Binance JSON data is not an array." << std::endl;
    }

    buffer_.clear();

    // Continue reading from WebSocket
    ws_.async_read(
        buffer_,
        beast::bind_front_handler(&session::on_read, shared_from_this()));
}

void on_close(beast::error_code ec)
{
    if(ec)
    return fail(ec, "close");

        // The make_printable() function helps print a ConstBufferSequence
        std::cout << beast::make_printable(buffer_.data()) << std::endl;
}
    
};


//------------------------------------------------------------------------------

int main()
{
    // auto const host = argv[1];
    // auto const port = argv[1];
    // auto const text = argv[1];

    std::ifstream file("details.json");
    Json::Value   actualjson;
    Json::Reader  jsonreader;

    jsonreader.parse(file, actualjson);

    // The io_context is required for all I/O
    net::io_context ioc;

    // The SSL context is required
    ssl::context ctx{ssl::context::tlsv12_client};

    // Verify the remote server's certificate
    ctx.set_verify_mode(ssl::verify_peer);
    ctx.set_default_verify_paths();

      load_root_certificates(ctx);

    // Launch the asynchronous operation
    std::make_shared<session>(ioc, ctx)->run("stream.binance.com", "9443",
                                             actualjson);

    // Run the I/O service. The call will return when
    // the socket is closed.
    ioc.run();
    return 1;
}
